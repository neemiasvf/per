# Designed and expected to run on specific shell-based runners that already have this kind of environment setup.

variables:
  GIT_STRATEGY: fetch
  POSTGRES_DB: per_test
  APP_REPOSITORY: 'git@gitlab.com:neemiasvf/per.git'
  AWS_ACCESS_KEY_ID: 'AKIAJFDCRLGVC2W5CCGA'
  AWS_SECRET_ACCESS_KEY: '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'
  AWS_APP_NAME: 'per'
  AWS_DEPLOYMENT_GROUP: 'staging'
  AWS_REGION: 'sa-east-1'
  HEROKU_APP_NAME: 'prediction-engine-rails'
  HEROKU_API_KEY: '04265483-540c-4f1c-80fd-af8f8e95b2ce'

stages:
  - prepare
  - test
  - deploy

.job_template: &prepare
  stage: prepare
  tags:
    - ruby
    - postgres
    - linux
  before_script:
    - ruby -v
    - rvm use @global && gem update --system && gem update && gem cleanup && rvm use @per

.job_template: &test
  stage: test
  tags:
    - ruby
    - postgres
    - linux
  before_script:
    - ruby -v
    - rvm use @per

.job_template: &deploy
  stage: deploy
  tags:
    - ruby
    - linux
  before_script:
    - ruby -v
    - rvm use @per
  environment:
    name: staging
  only:
    - staging
  when: on_success


prepare test:
  <<: *prepare
  script:
    - bundle install --system --without development production
    - export RAILS_ENV=test
    - bundle exec rake db:migrate:reset
    - bundle exec rake db:test:prepare

prepare auto deploy:
  <<: *prepare
  script:
    - bundle install --system --with development production
    - bundle install --path /var/www/per/shared/bundle --with development production

rspec:
  <<: *test
  script: bundle exec rspec

cucumber:
  <<: *test
  script: bundle exec cucumber

auto deploy staging to aws:
  <<: *deploy
  script:
    - bundle exec cap staging deploy
  environment:
    name: staging
    url: http://per.neemiasvf.me